import React, { useState, useRef, useEffect, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Send, Bot, User, X, Minimize2, MessageSquare, Globe, Languages } from 'lucide-react';

interface Message {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  language: string;
}

interface LanguageOption {
  code: string;
  name: string;
  nativeName: string;
  flag: string;
}

const supportedLanguages: LanguageOption[] = [
  { code: 'en', name: 'English', nativeName: 'English', flag: 'üá¨üáß' },
  { code: 'hi', name: 'Hindi', nativeName: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä', flag: 'üáÆüá≥' },
  { code: 'snt', name: 'Santhali', nativeName: '·±•·±ü·±±·±õ·±ü·±≤·±§', flag: 'üèõÔ∏è' },
  { code: 'ho', name: 'Ho', nativeName: 'Ho', flag: 'üèõÔ∏è' },
  { code: 'mun', name: 'Mundari', nativeName: 'Mundari', flag: 'üèõÔ∏è' },
  { code: 'kru', name: 'Kurukh', nativeName: '‡§ï‡•Å‡§°‡§º‡•Å‡§ñ‡§º', flag: 'üèõÔ∏è' },
  { code: 'bho', name: 'Bhojpuri', nativeName: '‡§≠‡•ã‡§ú‡§™‡•Å‡§∞‡•Ä', flag: 'üáÆüá≥' },
  { code: 'mag', name: 'Magahi', nativeName: '‡§Æ‡§ó‡§π‡•Ä', flag: 'üáÆüá≥' }
];

const greetingMessages = {
  en: 'Hello! I\'m your Jharkhand travel assistant. How can I help you explore the beautiful state of Jharkhand today?',
  hi: '‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§° ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•Ç‡§Å‡•§ ‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§° ‡§ï‡•á ‡§∏‡•Å‡§Ç‡§¶‡§∞ ‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§ï‡•ã ‡§¶‡•á‡§ñ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å?',
  snt: '·±°·±ö·±¶·±ü·±®! ·±ü·±¢·±ü·±ú ·±°·±∑·±ü·±®·±†·±∑·±ö·±∏·±∞ ·±¶·±ö·±® ·±ú·±ö·±≤·±ö·±≠·±§·±° ·±†·±ü·±±·±ü·±¢| ·±°·±∑·±ü·±®·±†·±∑·±ö·±∏·±∞ ·±®·±Æ·±±·±ü·±ú ·±™·±ö·±®·±ö·±† ·±û·±ü.·±ú·±§·±± ·±™·±Æ·±´ ·±ú·±ö·±≤·±ö ·±Æ·±¢·±ö·±ú-·±ü?',
  ho: 'Johar! A√± jharkhand yatra sahayak kana. Jharkhand re ki rupa gada khali dekhau kana? Ki gorop emoga?',
  mun: 'Johar! A√± jharkhand yatra madad kana. Jharkhand sundar rajya dekhabon ki madad emoga?',
  kru: '‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! ‡§Æ‡•à‡§Ç ‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§° ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•Ç‡§Å‡•§ ‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§° ‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§¶‡•á‡§ñ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡•Ç‡§Å?',
  bho: '‡§™‡•ç‡§∞‡§£‡§æ‡§Æ! ‡§π‡§Æ‡§∞‡§æ ‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§° ‡§ò‡•Ç‡§Æ‡•á ‡§ï‡•á ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡§à‡§Ç‡•§ ‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§° ‡§ï‡•á ‡§∏‡•Å‡§Ç‡§¶‡§∞ ‡§ú‡§ó‡§π ‡§¶‡•á‡§ñ‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•á‡§§‡§®‡§æ ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡•Ä‡§Ç?',
  mag: '‡§™‡•ç‡§∞‡§£‡§æ‡§Æ! ‡§π‡§Æ‡§∞‡§æ ‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§° ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§õ‡§ø‡§Ø‡•à‡•§ ‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§° ‡§ï‡•á ‡§∏‡•Å‡§Ç‡§¶‡§∞ ‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§¶‡•á‡§ñ‡•á ‡§Æ‡•á‡§Ç ‡§ï‡§§‡•á‡§ï ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§¨‡•à?'
};

const MultilingualChatbot: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(false);
  const [selectedLanguage, setSelectedLanguage] = useState<string>('en');
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const [shouldAutoScroll, setShouldAutoScroll] = useState(true);

  // Load messages and language preference from localStorage on component mount
  useEffect(() => {
    const savedMessages = localStorage.getItem('multilingual-chatbot-messages');
    const savedLanguage = localStorage.getItem('multilingual-chatbot-language');
    
    if (savedLanguage && supportedLanguages.some(lang => lang.code === savedLanguage)) {
      setSelectedLanguage(savedLanguage);
    }
    
    if (savedMessages) {
      try {
        const parsedMessages = JSON.parse(savedMessages).map((msg: Message) => ({
          ...msg,
          timestamp: new Date(msg.timestamp)
        }));
        setMessages(parsedMessages);
      } catch (error) {
        console.error('Error parsing saved messages:', error);
        initializeWelcomeMessage(savedLanguage || 'en');
      }
    } else {
      initializeWelcomeMessage(savedLanguage || 'en');
    }
  }, []);

  // Save messages to localStorage whenever messages change
  useEffect(() => {
    if (messages.length > 0) {
      localStorage.setItem('multilingual-chatbot-messages', JSON.stringify(messages));
    }
  }, [messages]);

  // Save language preference
  useEffect(() => {
    localStorage.setItem('multilingual-chatbot-language', selectedLanguage);
  }, [selectedLanguage]);

  const initializeWelcomeMessage = (language: string) => {
    const welcomeMessage: Message = {
      id: '1',
      role: 'assistant',
      content: greetingMessages[language as keyof typeof greetingMessages] || greetingMessages.en,
      timestamp: new Date(),
      language: language
    };
    setMessages([welcomeMessage]);
  };

  // Auto-scroll to bottom with smooth animation
  useEffect(() => {
    if (shouldAutoScroll && scrollAreaRef.current) {
      const scrollElement = scrollAreaRef.current.querySelector('[data-radix-scroll-area-viewport]') as HTMLDivElement;
      if (scrollElement) {
        scrollElement.scrollTo({
          top: scrollElement.scrollHeight,
          behavior: 'smooth'
        });
      }
    }
  }, [messages, shouldAutoScroll]);

  // Handle scroll events to detect if user is manually scrolling
  const handleScroll = (event: React.UIEvent<HTMLDivElement>) => {
    const element = event.currentTarget;
    const isNearBottom = element.scrollHeight - element.scrollTop - element.clientHeight < 50;
    setShouldAutoScroll(isNearBottom);
  };

  const translateText = async (text: string, targetLanguage: string): Promise<string> => {
    // Mock translation for now - in production, integrate with translation API
    const translations: { [key: string]: { [key: string]: string } } = {
      en: {
        'What are the top destinations in Jharkhand?': 'What are the top destinations in Jharkhand?',
        'Tell me about Ranchi': 'Tell me about Ranchi',
        'How is the weather?': 'How is the weather?'
      },
      hi: {
        'What are the top destinations in Jharkhand?': '‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§∂‡•Ä‡§∞‡•ç‡§∑ ‡§ó‡§Ç‡§§‡§µ‡•ç‡§Ø ‡§ï‡•å‡§® ‡§∏‡•á ‡§π‡•à‡§Ç?',
        'Tell me about Ranchi': '‡§∞‡§æ‡§Ç‡§ö‡•Ä ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§è‡§Ç',
        'How is the weather?': '‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•à‡§∏‡§æ ‡§π‡•à?'
      },
      snt: {
        'What are the top destinations in Jharkhand?': '·±°·±∑·±ü·±®·±†·±∑·±ö·±∏·±∞ ·±®·±Æ ·±™·±Æ·±´ ·±™·±Æ·±´ ·±•·±ö·±®·±Æ·±• ·±°·±ü·±≠·±ú·±ü ·±¢·±Æ·±±·±ü·±ú-·±ü?',
        'Tell me about Ranchi': '·±®·±ü·±∏·±™·±§ ·±µ·±ü·±µ·±ö·±õ ·±¢·±Æ ·±¢·±Æ·±±·±ü·±¢',
        'How is the weather?': '·±¶·±ö·±≠ ·±´·±ü·±ú ·±™·±Æ·±´ ·±û·±Æ·±†·±ü·±±·±ü?'
      }
    };

    return translations[targetLanguage]?.[text] || text;
  };

  const generateResponse = async (userMessage: string, language: string): Promise<string> => {
    // Mock AI responses in different languages
    const responses: { [key: string]: string[] } = {
      en: [
        `Great question! Jharkhand has amazing destinations like Hundru Falls, Betla National Park, Netarhat Hill Station, and Baidyanath Temple. Each offers unique experiences - from natural beauty to spiritual significance.`,
        `I'd be happy to help you explore Jharkhand! The state is known for its tribal culture, stunning waterfalls, wildlife sanctuaries, and religious sites. What specific aspect interests you?`,
        `Jharkhand is a treasure trove of natural wonders and cultural heritage. Popular attractions include Dassam Falls, Jonha Falls, Tagore Hill, and various tribal villages where you can experience authentic local culture.`
      ],
      hi: [
        `‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§∏‡§µ‡§æ‡§≤! ‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§π‡•Å‡§Ç‡§¶‡•ç‡§∞‡•Ç ‡§´‡•â‡§≤‡•ç‡§∏, ‡§¨‡•á‡§§‡§≤‡§æ ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Ø ‡§â‡§¶‡•ç‡§Ø‡§æ‡§®, ‡§®‡•á‡§§‡§∞‡§π‡§æ‡§ü ‡§π‡§ø‡§≤ ‡§∏‡•ç‡§ü‡•á‡§∂‡§® ‡§î‡§∞ ‡§¨‡•à‡§¶‡•ç‡§Ø‡§®‡§æ‡§• ‡§Æ‡§Ç‡§¶‡§ø‡§∞ ‡§ú‡•à‡§∏‡•á ‡§Ö‡§¶‡•ç‡§≠‡•Å‡§§ ‡§∏‡•ç‡§•‡§≤ ‡§π‡•à‡§Ç‡•§ ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§∏‡•Å‡§Ç‡§¶‡§∞‡§§‡§æ ‡§∏‡•á ‡§≤‡•á‡§ï‡§∞ ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§Æ‡§π‡§§‡•ç‡§µ ‡§§‡§ï ‡§Ö‡§®‡•Ç‡§†‡•á ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§`,
        `‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§° ‡§ï‡•Ä ‡§ñ‡•ã‡§ú ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§ï‡•á ‡§Æ‡•Å‡§ù‡•á ‡§ñ‡•Å‡§∂‡•Ä ‡§π‡•ã‡§ó‡•Ä! ‡§Ø‡§π ‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§Ö‡§™‡§®‡•Ä ‡§Ü‡§¶‡§ø‡§µ‡§æ‡§∏‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø, ‡§∂‡§æ‡§®‡§¶‡§æ‡§∞ ‡§ù‡§∞‡§®‡•ã‡§Ç, ‡§µ‡§®‡•ç‡§Ø‡§ú‡•Ä‡§µ ‡§Ö‡§≠‡§Ø‡§æ‡§∞‡§£‡•ç‡§Ø‡•ã‡§Ç ‡§î‡§∞ ‡§ß‡§æ‡§∞‡•ç‡§Æ‡§ø‡§ï ‡§∏‡•ç‡§•‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•ç‡§∞‡§∏‡§ø‡§¶‡•ç‡§ß ‡§π‡•à‡•§ ‡§Ü‡§™‡§ï‡•ã ‡§ï‡•å‡§® ‡§∏‡§æ ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§™‡§π‡§≤‡•Ç ‡§¶‡§ø‡§≤‡§ö‡§∏‡•ç‡§™ ‡§≤‡§ó‡§§‡§æ ‡§π‡•à?`,
        `‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§° ‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§Ü‡§∂‡•ç‡§ö‡§∞‡•ç‡§Ø‡•ã‡§Ç ‡§î‡§∞ ‡§∏‡§æ‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø‡§ï ‡§µ‡§ø‡§∞‡§æ‡§∏‡§§ ‡§ï‡§æ ‡§ñ‡§ú‡§æ‡§®‡§æ ‡§π‡•à‡•§ ‡§≤‡•ã‡§ï‡§™‡•ç‡§∞‡§ø‡§Ø ‡§Ü‡§ï‡§∞‡•ç‡§∑‡§£‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§¶‡§∏‡§Æ ‡§´‡•â‡§≤‡•ç‡§∏, ‡§ú‡•ã‡§®‡•ç‡§π‡§æ ‡§´‡•â‡§≤‡•ç‡§∏, ‡§ü‡•à‡§ó‡•ã‡§∞ ‡§π‡§ø‡§≤ ‡§î‡§∞ ‡§µ‡§ø‡§≠‡§ø‡§®‡•ç‡§® ‡§Ü‡§¶‡§ø‡§µ‡§æ‡§∏‡•Ä ‡§ó‡§æ‡§Ç‡§µ ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•à‡§Ç ‡§ú‡§π‡§æ‡§Ç ‡§Ü‡§™ ‡§™‡•ç‡§∞‡§æ‡§Æ‡§æ‡§£‡§ø‡§ï ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§∏‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§`
      ],
      snt: [
        `·±±·±ö·±∂·±ü ·±ü.·±∞·±§ ·±•·±ö·±®·±Æ·±• ·±†·±©·±û·±§ ·±†·±ü·±±·±ü! ·±°·±∑·±ü·±®·±†·±∑·±ö·±∏·±∞ ·±®·±Æ ·±¶·±©·±∏·±´·±®·±© ·±°·±ü·±¶·±ü·±∏·±°, ·±µ·±Æ·±õ·±û·±ü ·±°·±ü·±π·±õ·±§·±≠·±ü·±π·±®·±§ ·±µ·±ü·±ú·±ü·±±, ·±±·±Æ·±õ·±ü·±®·±¶·±ü·±¥ ·±µ·±©·±®·±© ·±¥·±∑·±ü·±∂ ·±ü·±® ·±µ·±ö·±≠·±´·±≠·±ö·±±·±ü·±õ·±∑ ·±¢·±ö·±±·±´·±§·±® ·±û·±Æ·±†·±ü·±± ·±ü.·±∞·±§ ·±™·±ö·±®·±ö·±† ·±°·±ü·±≠·±ú·±ü ·±¢·±Æ·±±·±ü·±ú-·±ü‡•§`,
        `·±°·±∑·±ü·±®·±†·±∑·±ö·±∏·±∞ ·±ß·±Æ·±û ·±û·±ü.·±ú·±§·±± ·±ü·±¢·±ü·±ú ·±ú·±ö·±≤·±ö ·±Æ·±¢ ·±û·±ü.·±ú·±§·±± ·±§·±ß ·±ü.·±∞·±§ ·±®·±ü·±π·±•·±†·±ü.·±ß! ·±±·±ö·±∂·±ü ·±Ø·±ö·±±·±ö·±õ ·±´·±ö ·±ü·±π·±´·±§·±µ·±ü·±π·±•·±§ ·±û·±ü·±†·±™·±ü·±®, ·±™·±ö·±®·±ö·±† ·±°·±ü·±¶·±ü·±∏·±°, ·±°·±§·±µ·±°·±§·±≠·±ü.·±û·±§ ·±®·±ü·±†·±∑·±ü ·±ö·±≤·±ü·±ú ·±ü·±® ·±´·±∑·±ö·±®·±ö·±¢ ·±¥·±∑·±ü·±∂ ·±†·±ö ·±û·±ü.·±ú·±§·±± ·±µ·±ü·±∞·±ü·±≠·±ö·±ú-·±ü‡•§`,
        `·±°·±∑·±ü·±®·±†·±∑·±ö·±∏·±∞ ·±´·±ö ·±°·±§·±≠·±ö·±± ·±Ø·±®·±ö·±†·±®·±§·±õ·±§·±≠·±ü·±ú ·±™·±ö·±®·±ö·±† ·±ü·±® ·±û·±ü·±†·±™·±ü·±® ·±™·±∑·±ü·±∏·±´·±ö·±ú ·±®·±Æ·±±·±ü·±ú ·±´·±ü·±± ·±†·±ü·±±·±ü‡•§ ·±ß·±©·±õ·±©·±¢·±ü·±± ·±û·±ü·±†·±™·±ü·±®·±ü·±± ·±¥·±∑·±ü·±∂ ·±®·±Æ ·±´·±ö·±•·±ö·±¢ ·±°·±ü·±¶·±ü·±∏·±°, ·±°·±ö·±±·±¶·±ü ·±°·±ü·±¶·±ü·±∏·±°, ·±¥·±Æ·±ú·±≥·±® ·±µ·±©·±®·±© ·±ü·±® ·±°·±ö·±õ·±ö ·±û·±Æ·±†·±ü·±± ·±ü·±π·±´·±§·±µ·±ü·±π·±•·±§ ·±ü.·±õ·±© ·±†·±ö ·±¢·±Æ·±±·±ü·±ú-·±ü‡•§`
      ]
    };

    const responseArray = responses[language] || responses.en;
    const randomResponse = responseArray[Math.floor(Math.random() * responseArray.length)];
    return randomResponse;
  };

  const sendMessage = async () => {
    if (!input.trim() || loading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: input,
      timestamp: new Date(),
      language: selectedLanguage
    };

    setMessages(prev => [...prev, userMessage]);
    const currentInput = input;
    setInput('');
    setLoading(true);

    try {
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const response = await generateResponse(currentInput, selectedLanguage);
      
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: response,
        timestamp: new Date(),
        language: selectedLanguage
      };

      setMessages(prev => [...prev, assistantMessage]);
    } catch (error) {
      console.error('Error generating response:', error);
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: selectedLanguage === 'hi' ? '‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§ï‡•Å‡§õ ‡§ó‡§≤‡§§ ‡§π‡•Å‡§Ü‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§' : 
                selectedLanguage === 'snt' ? '·±¢·±ü.·±Ø·±∑ ·±¢·±Æ, ·±™·±Æ·±´·±ü·±ú ·±µ·±∑·±©·±û ·±¶·±©·±≠·±Æ·±±·±ü‡•§ ·±´·±ö·±¶·±≤·±ü ·±™·±Æ·±•·±¥·±ü ·±¢·±Æ‡•§' :
                'Sorry, something went wrong. Please try again.',
        timestamp: new Date(),
        language: selectedLanguage
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setLoading(false);
    }
  };

  const handleLanguageChange = async (newLanguage: string) => {
    setSelectedLanguage(newLanguage);
    
    // Add a language change message
    const changeMessage: Message = {
      id: Date.now().toString(),
      role: 'assistant',
      content: greetingMessages[newLanguage as keyof typeof greetingMessages] || greetingMessages.en,
      timestamp: new Date(),
      language: newLanguage
    };
    
    setMessages(prev => [...prev, changeMessage]);
  };

  const clearChat = () => {
    setMessages([]);
    localStorage.removeItem('multilingual-chatbot-messages');
    initializeWelcomeMessage(selectedLanguage);
  };

  if (!isOpen) {
    return (
      <div className="fixed bottom-6 right-6 z-50">
        <Button
          onClick={() => setIsOpen(true)}
          className="w-16 h-16 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 bg-gradient-to-r from-emerald-500 to-teal-600 hover:from-emerald-600 hover:to-teal-700"
        >
          <div className="flex flex-col items-center">
            <Languages className="h-6 w-6" />
            <span className="text-xs mt-1">Help</span>
          </div>
        </Button>
      </div>
    );
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
      <div className="bg-gradient-to-br from-gray-900 to-black w-full max-w-4xl h-full max-h-[90vh] rounded-2xl shadow-2xl flex flex-col">
        <Card className={`w-full h-full bg-transparent border-0 shadow-none flex flex-col ${
          isMinimized ? 'h-16' : 'h-full'
        }`}>
          <CardHeader className="bg-gradient-to-r from-emerald-600 to-teal-600 text-white rounded-t-2xl p-6">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-12 h-12 bg-white/20 rounded-full flex items-center justify-center">
                  <Languages className="h-6 w-6" />
                </div>
                <div>
                  <CardTitle className="text-xl font-bold">Jharkhand Travel Assistant</CardTitle>
                  <p className="text-emerald-100 text-sm">Multi-Language Support üó£Ô∏è</p>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <Select value={selectedLanguage} onValueChange={handleLanguageChange}>
                  <SelectTrigger className="w-40 bg-white/10 border-white/20 text-white">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {supportedLanguages.map((lang) => (
                      <SelectItem key={lang.code} value={lang.code}>
                        <div className="flex items-center gap-2">
                          <span>{lang.flag}</span>
                          <span>{lang.name}</span>
                          <span className="text-sm opacity-70">({lang.nativeName})</span>
                        </div>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setIsMinimized(!isMinimized)}
                  className="text-white hover:bg-white/10"
                >
                  {isMinimized ? <MessageSquare className="h-4 w-4" /> : <Minimize2 className="h-4 w-4" />}
                </Button>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setIsOpen(false)}
                  className="text-white hover:bg-white/10"
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </CardHeader>
          
          {!isMinimized && (
            <CardContent className="flex flex-col h-full bg-white/5 backdrop-blur-sm p-0 rounded-b-2xl">
              {/* Chat Messages Area */}
              <ScrollArea 
                className="flex-1 p-6" 
                ref={scrollAreaRef}
                onScrollCapture={handleScroll}
              >
                <div className="space-y-4">
                  {messages.map((message) => (
                    <div
                      key={message.id}
                      className={`flex gap-4 items-start animate-fadeIn ${
                        message.role === 'user' ? 'flex-row-reverse' : 'flex-row'
                      }`}
                    >
                      <Avatar className="w-10 h-10 flex-shrink-0">
                        <AvatarFallback className={`text-sm font-semibold ${
                          message.role === 'user' 
                            ? 'bg-gradient-to-r from-blue-500 to-purple-600 text-white' 
                            : 'bg-gradient-to-r from-emerald-500 to-teal-600 text-white'
                        }`}>
                          {message.role === 'user' ? (
                            <User className="w-5 h-5" />
                          ) : (
                            <Bot className="w-5 h-5" />
                          )}
                        </AvatarFallback>
                      </Avatar>
                      
                      <div className={`max-w-[75%] ${message.role === 'user' ? 'text-right' : 'text-left'}`}>
                        <div
                          className={`p-4 rounded-2xl text-sm leading-relaxed shadow-lg ${
                            message.role === 'user'
                              ? 'bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-br-md'
                              : 'bg-white text-gray-800 border border-gray-200 rounded-bl-md'
                          }`}
                        >
                          <p className="whitespace-pre-wrap break-words">{message.content}</p>
                        </div>
                        <div className="flex items-center gap-2 mt-2 px-2">
                          <p className="text-xs text-gray-400">
                            {message.timestamp.toLocaleTimeString()}
                          </p>
                          {supportedLanguages.find(lang => lang.code === message.language) && (
                            <span className="text-xs bg-gray-700 text-white px-2 py-1 rounded-full">
                              {supportedLanguages.find(lang => lang.code === message.language)?.flag}
                              {supportedLanguages.find(lang => lang.code === message.language)?.name}
                            </span>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                  
                  {loading && (
                    <div className="flex gap-4 items-start animate-fadeIn">
                      <Avatar className="w-10 h-10">
                        <AvatarFallback className="bg-gradient-to-r from-emerald-500 to-teal-600 text-white">
                          <Bot className="w-5 h-5" />
                        </AvatarFallback>
                      </Avatar>
                      <div className="bg-white p-4 rounded-2xl rounded-bl-md shadow-lg max-w-[75%]">
                        <div className="flex space-x-2">
                          <div className="w-3 h-3 bg-emerald-400 rounded-full animate-bounce"></div>
                          <div className="w-3 h-3 bg-emerald-400 rounded-full animate-bounce [animation-delay:0.1s]"></div>
                          <div className="w-3 h-3 bg-emerald-400 rounded-full animate-bounce [animation-delay:0.2s]"></div>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </ScrollArea>
              
              {/* Scroll to bottom button */}
              {!shouldAutoScroll && (
                <div className="absolute bottom-24 right-8">
                  <Button
                    size="sm"
                    variant="secondary"
                    className="rounded-full shadow-lg bg-white/90 hover:bg-white"
                    onClick={() => {
                      setShouldAutoScroll(true);
                      const scrollElement = scrollAreaRef.current?.querySelector('[data-radix-scroll-area-viewport]') as HTMLDivElement;
                      if (scrollElement) {
                        scrollElement.scrollTo({
                          top: scrollElement.scrollHeight,
                          behavior: 'smooth'
                        });
                      }
                    }}
                  >
                    <span className="text-lg">‚Üì</span>
                  </Button>
                </div>
              )}
              
              {/* Input Area */}
              <div className="bg-gray-800/50 backdrop-blur-sm p-6 rounded-b-2xl border-t border-gray-600/30">
                <div className="flex gap-3 items-center">
                  <div className="flex-1 relative">
                    <Input
                      value={input}
                      onChange={(e) => setInput(e.target.value)}
                      onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && sendMessage()}
                      placeholder={
                        selectedLanguage === 'hi' ? '‡§Ö‡§™‡§®‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§Ø‡§π‡§æ‡§Å ‡§≤‡§ø‡§ñ‡•á‡§Ç...' :
                        selectedLanguage === 'snt' ? '·±ü·±¢·±ü·±ú ·±†·±∑·±ö·±µ·±ö·±® ·±±·±ö·±∏·±∞·±Æ ·±ö·±û ·±¢·±Æ...' :
                        'Type your message here...'
                      }
                      disabled={loading}
                      className="bg-white/90 border-gray-300 focus:border-emerald-500 focus:ring-emerald-500 pr-12 py-3 text-gray-800 rounded-xl"
                    />
                    <Globe className="absolute right-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                  </div>
                  <Button
                    onClick={sendMessage}
                    disabled={loading || !input.trim()}
                    className="bg-gradient-to-r from-emerald-500 to-teal-600 hover:from-emerald-600 hover:to-teal-700 text-white rounded-xl px-6 py-3 transition-all duration-200"
                  >
                    <Send className="h-4 w-4" />
                  </Button>
                  <Button
                    onClick={clearChat}
                    variant="outline"
                    className="border-gray-500 text-gray-300 hover:bg-gray-700 rounded-xl px-4 py-3"
                  >
                    Clear
                  </Button>
                </div>
                
                {/* Language Info */}
                <div className="mt-3 text-center">
                  <p className="text-xs text-gray-400">
                    {selectedLanguage === 'hi' ? 'üó£Ô∏è ‡§π‡§ø‡§Ç‡§¶‡•Ä, ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä, ‡§∏‡§Ç‡§•‡§æ‡§≤‡•Ä, ‡§π‡•ã, ‡§Æ‡•Å‡§Ç‡§°‡§æ‡§∞‡•Ä, ‡§ï‡•Å‡§°‡•Å‡§ñ ‡§î‡§∞ ‡§Ö‡§®‡•ç‡§Ø ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§≠‡§æ‡§∑‡§æ‡§ì‡§Ç ‡§Æ‡•á‡§Ç ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§' :
                     selectedLanguage === 'snt' ? 'üó£Ô∏è ·±¶·±§·±±·±´·±§, ·±§·±ù·±û·±§·±•, ·±•·±ü·±±·±õ·±ü·±≤·±§, ·±¶·±≥, ·±¢·±©·±∏·±∞·±ü·±®·±§, ·±†·±©·±≤·±©·±†·±∑ ·±ü·±® ·±Æ·±¥·±ü·±ú ·±°·±ü·±≠·±ú·±ü·±≠·±ü·±± ·±Ø·±ü·±π·±®·±•·±§ ·±õ·±Æ ·±ú·±ö·±≤·±ö ·±ß·±ü·±¢ ·±¢·±Æ‡•§' :
                     'üó£Ô∏è Get assistance in Hindi, English, Santhali, Ho, Mundari, Kurukh, and other regional languages spoken in Jharkhand.'}
                  </p>
                </div>
              </div>
            </CardContent>
          )}
        </Card>
      </div>
    </div>
  );
};

export default MultilingualChatbot;
